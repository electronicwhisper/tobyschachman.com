// Generated by CoffeeScript 1.6.3
(function() {
  var Boid, alignmentMultiplier, animationLoop, boids, clickForceMultiplier, clickPosition, clickTime, i, limit, maxForce, maxSpeed, mousePosition, num, separationMultiplier, viewRadius, _i;

  num = numeric;

  limit = function(v, maxSpeed) {
    var speed;
    speed = num.norm2(v);
    if (speed > maxSpeed) {
      return num.mul(maxSpeed / speed, v);
    } else {
      return v;
    }
  };

  maxSpeed = 8;

  maxForce = 0.2;

  viewRadius = 30;

  separationMultiplier = 1.6;

  alignmentMultiplier = 3;

  clickForceMultiplier = 0.2;

  Boid = (function() {
    function Boid() {
      this.position = [Math.random() * 1000, Math.random() * 1000];
      this.velocity = [0, 0];
      this.acceleration = [0, 0];
    }

    Boid.prototype.update = function() {
      var alignment, away, boid, clickForce, desired, distanceFromClick, goal, separate, steer, _i, _len;
      goal = num.sub(mousePosition, this.position);
      separate = [0, 0];
      alignment = [0, 0];
      for (_i = 0, _len = boids.length; _i < _len; _i++) {
        boid = boids[_i];
        if (boid === this) {
          continue;
        }
        if (num.norm2(num.sub(boid.position, this.position)) > viewRadius) {
          continue;
        }
        away = num.sub(this.position, boid.position);
        separate = num.add(separate, away);
        alignment = num.add(alignment, boid.velocity);
      }
      separate = num.mul(separationMultiplier, separate);
      alignment = num.mul(alignmentMultiplier, alignment);
      clickForce = [0, 0];
      if (clickTime >= 0) {
        clickForce = num.sub(this.position, clickPosition);
        distanceFromClick = num.norm2(num.sub(clickPosition, this.position));
        clickForce = num.mul(50 / distanceFromClick, clickForce);
      }
      clickForce = num.mul(clickForceMultiplier, clickForce);
      desired = num.add(num.add(goal, separate), alignment);
      steer = num.sub(desired, this.velocity);
      steer = limit(steer, maxForce);
      this.acceleration = num.add(steer, clickForce);
      this.velocity = num.add(this.velocity, this.acceleration);
      this.velocity = limit(this.velocity, maxSpeed);
      return this.position = num.add(this.position, this.velocity);
    };

    Boid.prototype.display = function() {
      var x, y;
      if (!this.el) {
        this.el = document.createElement("input");
        this.el.setAttribute("type", "checkbox");
        document.body.appendChild(this.el);
      }
      x = this.position[0] - 12;
      y = this.position[1] - 12;
      this.el.style.transform = "translate(" + x + "px, " + y + "px)";
      this.el.style.MozTransform = "translate(" + x + "px, " + y + "px)";
      return this.el.style.webkitTransform = "translate(" + x + "px, " + y + "px)";
    };

    return Boid;

  })();

  boids = [];

  for (i = _i = 0; _i < 100; i = ++_i) {
    boids.push(new Boid());
  }

  clickPosition = [0, 0];

  clickTime = -1;

  mousePosition = [0, 0];

  document.addEventListener("mousemove", function(e) {
    return mousePosition = [e.clientX, e.clientY];
  });

  document.addEventListener("mousedown", function(e) {
    var boid, distance, _j, _len, _results;
    e.preventDefault();
    clickPosition = mousePosition;
    clickTime = 0;
    _results = [];
    for (_j = 0, _len = boids.length; _j < _len; _j++) {
      boid = boids[_j];
      distance = num.norm2(num.sub(mousePosition, boid.position));
      if (distance < 50) {
        _results.push(boid.el.checked = !boid.el.checked);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  animationLoop = function() {
    var boid, _j, _len, _results;
    requestAnimationFrame(animationLoop);
    if (clickTime !== -1) {
      clickTime += 1;
    }
    if (clickTime > 20) {
      clickTime = -1;
    }
    _results = [];
    for (_j = 0, _len = boids.length; _j < _len; _j++) {
      boid = boids[_j];
      boid.update();
      _results.push(boid.display());
    }
    return _results;
  };

  requestAnimationFrame(animationLoop);

}).call(this);
